global:
  namespace:
    name: "space-tenant"

  labels:
    - name: tenant
      value: my-tenant
    - name: space
      value: my-space

cassandra:
  enabled: false
  namespace:
    create: true
    name: "space-tenant"

  labels:
    - name: tenant
      value: my-tenant
    - name: space
      value: my-space

  container:
    replicas: 1
    image:
      url: cassandra:4.1.5
      repoSecret:
        name: "registry-secret"
        enabled: false
    storage_path: "/var/lib/cassandra"
    
    resource_allocation:
      limits:
        memory: 4Gi
        cpu: '1'
      requests:
        memory: 2Gi
        cpu: '0.5'
    
    envList:
    - key: HEAP_NEWSIZE
      value: 128M
    - key: MAX_HEAP_SIZE
      value: 2G
    - key: CASSANDRA_DC
      value: DC1
    - key: CASSANDRA_ENDPOINT_SNITCH
      value: GossipingPropertyFileSnitch

  credentials:
    cassandra_username: cassandra
    cassandra_password: cassandra

  # Deploy network policy that allow ingress only from Fabric pod
  networkPolicy:
    enabled: false

  # Cassandra port
  listening_port: 9042

  storage:
    class: efs-cassandra
    alocated_amount: 10Gi

postgres:
  enabled: false
  namespace: 
    create: false
    name: "space-tenant"

  labels:
    - name: tenant
      value: my-tenant
    - name: space
      value: my-space

  container:
    replicas: 1
    image:
      url: postgres:15.7

      repoSecret:
        name: "registry-secret"
        enabled: false

    storage_path: "/opt/apps/pgsql/data/data/"

    resource_allocation:
      limits:
        memory: 4Gi
        cpu: '1'
      requests:
        memory: 2Gi
        cpu: '0.5'

    envList:
    - key: PGDATA
      value: "/opt/apps/pgsql/data/data/pgdata"

  credentials:
    postgres_username: postgres
    postgres_password: postgres  

  networkPolicy:
    enabled: true
  
  # PG port
  listening_port: 5432

  storage:
    class: efs-pg
    alocated_amount: 10Gi

kafka:
  enabled: false
  namespace:
    create: false
    name: "space-tenant"

  labels:
    - name: tenant
      value: my-tenant
    - name: space
      value: my-space

  container:
    replicas: 1
    image:
      url: 329508970117.dkr.ecr.eu-central-1.amazonaws.com/k2view_shared:kafka_7.2

      repoSecret:
        name: "registry-secret"
        enabled: false
        dockerRegistry:
          auths:
            "docker.share.cloud.k2view.com":
              username: ""
              password: ""
    storage_path: "/home/kafka/zk_data"

    resource_allocation:
      limits:
        memory: 4Gi
        cpu: '1'
      requests:
        memory: 2Gi
        cpu: '0.4'

    envList:
    - key: DATA
      value: "/home/kafka/zk_data"

  networkPolicy:
    enabled: true

  listening_port: 9093

  storage:
    class: efs-kafka
    alocated_amount: 10Gi  

fabric:
  enabled: true
  namespace:
    create: false
    name: "space-tenant"

  labels:
    - name: tenant
      value: my-tenant
    - name: space
      value: my-space

  deploy:
    type: Deployment 
    # type = StatefulSet|Deployment

  serviceAccount:
    create: true   # For new sa, creation of sa only in k8s side
    name: ""       # For existing sa, if create is true, name should be an empty string
    provider: ""   # aws|gcp
    arn: ""        # For AWS role
    # gcp_service_account_name: "" # For GCP sa
    project_id: "" # For GCP SA
    cluster_name: ""
    azure_client_id: "" # For Azure Managed Identity
      
  container:
    replicas: 1
    resource_allocation:
      limits:
        memory: 8Gi
        cpu: '2'
      requests:
        memory: 4Gi
        cpu: '0.5'
    livenessProbe:
      initialDelaySeconds: 300
      periodSeconds: 60
    
    # Fabric Image to be populated into Deployment
    image:
      url: ""
      repoSecret:
        enabled: false

  storage:
    pvc:
      enabled: true
    securityContext: true
    class: efs-sc
    alocated_amount: 10Gi

  # Wether if Fabric will scale up or not
  scaling:
    enabled: false

  # Deploy network policy that allow to fabric egress only to cassandra pod
  networkPolicy:
    ingress:
      enabled: false
    egress:
      enabled: false

  ingress:
    enabled: true
    class_name: "nginx"
    type: "nginx"
    appgw_ssl_certificate_name: ""
    port: 3213
    host: space-tenant.domain
    tlsSecret:
      enabled: false
      key: ""
      crt: ""
      key_b64: ""
      crt_b64: ""
    custom_annotations:
      enabled: false
      annotations:
        - key: nginx.ingress.kubernetes.io/proxy-body-size
          value: "0"
        - key: nginx.ingress.kubernetes.io/proxy-read-timeout
          value: "7d"
        - key: nginx.ingress.kubernetes.io/ssl-redirect
          value: "false"

  # Each key in the data will be mounted as a file under mountPath
  mountSecret:
    name: config-secrets
    enabled: false # true for mount the secret on fabric pod, false for mount only on init container
    mountPath: /opt/apps/fabric/config-secrets
    data:
      config: 'fabricdb|MDB_DEFAULT_SCHEMA_CACHE_STORAGE_TYPE|NFS\nfabricdb|MDB_DEFAULT_CACHE_PATH|/opt/apps/fabric/pod_tmp/fdb_cache\ndefault_pubsub|TYPE|MEMORY\ncommon_area_pubsub|TYPE|MEMORY\nfabric|WEB_SESSION_EXPIRATION_TIME_OUT|540\nfabric|ENABLE_BROADWAY_DEBUG_SERVLET|true\ndefault_session|RECONNECT_MAX_DELAY_MS|1000\nfabric|ENABLE_DB_INTERFACE_PROXY|true\nfabric|WEBSERVER_FILTERS|[{\"class\":\"com.k2view.cdbms.ws.ProxyForward\",\"patterns\":[\"/studio/*\"],\"params\":{\"target\":\"http://localhost:3000\",\"isStaticTarget\":true}},{\"class\":\"com.k2view.cdbms.ws.ProxyForward\",\"patterns\":[\"/socket.io/*\"],\"params\":{\"target\":\"http://localhost:3000\",\"isStaticTarget\":false}}];\nfabric|OVERRIDE_API_SCHEMA|HTTPS|ADD\nfabric|OVERRIDE_API_PORT|443|ADD\ndata_discovery|GRAPH_DB_URL|neo4j://dev-neo4j-service:7687\ndata_discovery|GRAPH_DB_USER|neo4j\ndata_discovery|GRAPH_DB_PASSWORD|changeit\n'
      cp_files: ''
      idp_cert: ''
  
  # Mounting secrets to the fabric pod will be not decoded to base64
  mountSecretB64enc:
      name: mount-b64-secrets
      enabled: false # true for mount the secret on fabric pod, false for mount only on init container
      mountPath: /opt/apps/fabric/mount-b64-secrets
      data:
        keystore: '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'


  # Each key will be added as enviroment to the fabric container
  secretsList:
    - name: common-env-secrets
      data:
        CONFIG_UPDATE_FILE: '/opt/apps/fabric/config-secrets/config'
        COPY_FILES: ''
        IDP_CERT_PATH: ''
        IDP_ROLE: ''
        INIT_CONF: ''
        PROJECT_ID: ''
        PROJECT_NAME: ''
        SPACE_NAME: ''
        ADD_CERTS: ''
    - name: cassandra-secrets
      data:
        cassandra.default.user: "cassandra"
        cassandra.default.password: "cassandra"
        cassandra.default.hosts: "cassandra-service"
  
  initSecretsList:
  - name: config-init-secrets
    data:
      IDP_CERT_PATH: ''
      IDP_ROLE: ''
      GIT_BRANCH: 'main'
      GIT_PATH_IN_REPO: ''
      GIT_REPO: ''
      GIT_TOKEN: ''
      START_FABRIC: 'false'

neo4j:
  enabled: false
  namespace:
    name: "space-tenant"

  labels:
    - name: tenant
      value: my-tenant
    - name: space
      value: my-space

  container:
    image:
      url: neo4j:5.18-enterprise
      repoSecret:
        enabled: false

    storage_path: "/var/lib/neo4j/data"

    resource_allocation:
      limits:
        memory: 4Gi
        cpu: '1'
      requests:
        memory: 2Gi
        cpu: '0.4'

    envList:
    - key: NEO4J_PLUGINS
      value: '["graph-data-science"]'
    - key: NEO4J_server_config_strict__validation_enabled
      value: "false"

  credentials:
    username: neo4j
    password: changeit

  networkPolicy:
    enabled: true

  storage:
    class: efs-pg
    alocated_amount: 10Gi
